# .github/workflows/ci.yml - Continuous Integration Pipeline
name: CI

on:
  push:
    branches: [main, develop, refactor/professionalize]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ==================== BACKEND TESTING ====================
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: oracle_trader_bot_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential curl

      - name: Install Python dependencies
        run: |
          cd oracle_trader_bot
          pip install --upgrade pip
          pip install -r requirements.txt
          # Install development dependencies
          pip install pytest pytest-asyncio pytest-cov ruff black httpx

      - name: Lint with Ruff
        run: |
          cd oracle_trader_bot
          ruff check app/ tests/ --output-format=github
        continue-on-error: true

      - name: Format check with Black
        run: |
          cd oracle_trader_bot
          black --check --diff app/ tests/
        continue-on-error: true

      - name: Type check with mypy (if available)
        run: |
          cd oracle_trader_bot
          if pip show mypy >/dev/null 2>&1; then
            mypy app/ --ignore-missing-imports
          else
            echo "Mypy not installed, skipping type checking"
          fi
        continue-on-error: true

      - name: Run tests with pytest
        env:
          # Test environment variables
          APP_STARTUP_MODE: lite
          SKIP_DB_INIT: true
          POSTGRES_SERVER: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: oracle_trader_bot_test
          REDIS_URL: redis://localhost:6379/0
          # Disable external API calls in tests
          KUCOIN_API_KEY: ""
          KUCOIN_API_SECRET: ""
          KUCOIN_API_PASSPHRASE: ""
          KUCOIN_SANDBOX: true
          # Test-specific settings
          TESTING: true
          DEBUG: false
          SETTINGS_RATE_LIMIT: 1000/min
          HEALTH_RATE_LIMIT: 1000/min
        run: |
          cd oracle_trader_bot
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=term-missing
        continue-on-error: false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./oracle_trader_bot/coverage.xml
          flags: backend
          name: backend-coverage
        continue-on-error: true

  # ==================== FRONTEND TESTING ====================
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: oracle-trader-frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd oracle-trader-frontend
          npm ci

      - name: Lint frontend code
        run: |
          cd oracle-trader-frontend
          npm run lint
        continue-on-error: true

      - name: Type check TypeScript
        run: |
          cd oracle-trader-frontend
          npm run type-check
        continue-on-error: true

      - name: Run frontend tests
        run: |
          cd oracle-trader-frontend
          npm run test:unit
        continue-on-error: true

      - name: Build frontend
        env:
          VITE_API_BASE_URL: http://localhost:8000/api/v1
          VITE_WS_BASE_URL: ws://localhost:8000/api/v1
        run: |
          cd oracle-trader-frontend
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: oracle-trader-frontend/dist
          retention-days: 7

  # ==================== INTEGRATION TESTING ====================
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: oracle_trader_bot_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          cd oracle_trader_bot
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio httpx

      - name: Run integration tests
        env:
          APP_STARTUP_MODE: lite
          SKIP_DB_INIT: true
          TESTING: true
          POSTGRES_SERVER: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: oracle_trader_bot_test
        run: |
          cd oracle_trader_bot
          python -m pytest tests/test_integration_smoke.py -v
        continue-on-error: true

  # ==================== SECURITY SCANNING ====================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # ==================== BUILD STATUS SUMMARY ====================
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, integration-test, security-scan]
    if: always()

    steps:
      - name: Check build results
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Tests | ${{ needs.backend-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Tests | ${{ needs.frontend-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          
          # Set overall status
          if [[ "${{ needs.backend-test.result }}" == "success" && "${{ needs.frontend-test.result }}" == "success" ]]; then
            echo "✅ **Build Status: SUCCESS**" >> $GITHUB_STEP_SUMMARY
            echo "All core tests passed successfully!"
          else
            echo "❌ **Build Status: FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "Some tests failed. Please check the individual job results."
            exit 1
          fi
