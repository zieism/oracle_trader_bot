# .github/workflows/docker.yml - Docker Build and Publish Pipeline
name: Docker

on:
  push:
    tags:
      - 'v*.*.*'
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}/backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/frontend

jobs:
  # ==================== BUILD BACKEND IMAGE ====================
  build-backend:
    name: Build Backend Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            # Tag with version for tags
            type=ref,event=tag
            # Tag with latest for main branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Tag with branch name for other branches
            type=ref,event=branch
            # Tag with PR number for pull requests
            type=ref,event=pr
            # Tag with short SHA
            type=sha,prefix={{branch}}-

      - name: Build and push Backend image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.backend
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

  # ==================== BUILD FRONTEND IMAGE ====================
  build-frontend:
    name: Build Frontend Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            # Tag with version for tags
            type=ref,event=tag
            # Tag with latest for main branch
            type=raw,value=latest,enable={{is_default_branch}}
            # Tag with branch name for other branches
            type=ref,event=branch
            # Tag with PR number for pull requests
            type=ref,event=pr
            # Tag with short SHA
            type=sha,prefix={{branch}}-

      - name: Build and push Frontend image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.frontend
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_API_BASE_URL=http://localhost/api/v1
            VITE_WS_BASE_URL=ws://localhost/api/v1
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

  # ==================== SECURITY SCANNING ====================
  scan-images:
    name: Security Scan Images
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.event_name != 'pull_request'
    
    strategy:
      matrix:
        image: [backend, frontend]
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-${{ matrix.image }}-results.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-${{ matrix.image }}-results.sarif'
        continue-on-error: true

  # ==================== TEST DEPLOYMENT ====================
  test-deployment:
    name: Test Docker Deployment
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: github.event_name != 'pull_request'

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: oracle_trader_bot
          POSTGRES_USER: oracle_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create test environment file
        run: |
          cat << EOF > .env
          PROJECT_NAME=Oracle Trader Bot Test
          APP_STARTUP_MODE=full
          SKIP_DB_INIT=false
          DEBUG=false
          POSTGRES_SERVER=localhost
          POSTGRES_PORT=5432
          POSTGRES_USER=oracle_user
          POSTGRES_PASSWORD=test_password
          POSTGRES_DB=oracle_trader_bot
          ADMIN_API_TOKEN=test_admin_token
          KUCOIN_API_KEY=
          KUCOIN_API_SECRET=
          KUCOIN_API_PASSPHRASE=
          KUCOIN_SANDBOX=true
          VITE_API_BASE_URL=http://localhost/api/v1
          VITE_WS_BASE_URL=ws://localhost/api/v1
          EOF

      - name: Test docker-compose deployment
        run: |
          # Use built images
          export BACKEND_IMAGE="${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.ref_name }}"
          export FRONTEND_IMAGE="${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.ref_name }}"
          
          # Start services
          docker-compose up -d --wait postgres
          sleep 10
          
          # Test database connectivity
          docker-compose exec -T postgres pg_isready -U oracle_user
          
          echo "âœ… Docker deployment test passed"

  # ==================== PUBLISH SUMMARY ====================
  publish-summary:
    name: Publish Summary
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend, test-deployment]
    if: always()

    steps:
      - name: Generate summary
        run: |
          echo "## Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Images |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend | ${{ needs.build-backend.result }} | ${{ needs.build-backend.outputs.image-tags }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend | ${{ needs.build-frontend.result }} | ${{ needs.build-frontend.outputs.image-tags }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment Test | ${{ needs.test-deployment.result }} | - |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Container Registry" >> $GITHUB_STEP_SUMMARY
          echo "Images published to: \`${{ env.REGISTRY }}/${{ github.repository }}\`" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ðŸš€ Release Images" >> $GITHUB_STEP_SUMMARY
            echo "- Backend: \`${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Frontend: \`${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Ready for production deployment!** ðŸŽ‰" >> $GITHUB_STEP_SUMMARY
          fi

  # ==================== CLEANUP ====================
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: always() && github.event_name == 'pull_request'

    steps:
      - name: Delete PR images
        continue-on-error: true
        run: |
          # This would clean up PR-specific images to save storage
          # Implementation depends on your container registry cleanup policies
          echo "PR images cleanup (if implemented)"
