version: '3.8'

services:
  oracle-trader:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    container_name: oracle-trader-app-prod
    restart: always
    environment:
      - ENVIRONMENT=production
      - POSTGRES_SERVER=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - API_SECRET_KEY=${API_SECRET_KEY}
      - PROMETHEUS_PORT=8001
      - LOG_LEVEL=WARNING
      - MAX_WORKERS=${MAX_WORKERS:-4}
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - app_logs:/app/logs
      - app_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - oracle-trader-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 30s
        max_attempts: 5

  nginx:
    image: nginx:alpine
    container_name: oracle-trader-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl-config:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - certbot_conf:/etc/letsencrypt:ro
      - certbot_www:/var/www/certbot:ro
    depends_on:
      - oracle-trader
    networks:
      - oracle-trader-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  postgres:
    image: postgres:15-alpine
    container_name: oracle-trader-postgres-prod
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      - POSTGRES_LOG_STATEMENT=all
      - POSTGRES_LOG_DESTINATION=stderr
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_backups:/backups
      - postgres_logs:/var/log/postgresql
    networks:
      - oracle-trader-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  redis:
    image: redis:7-alpine
    container_name: oracle-trader-redis-prod
    restart: always
    volumes:
      - redis_data:/data
      - redis_logs:/var/log/redis
    networks:
      - oracle-trader-network
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 0
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  prometheus:
    image: prom/prometheus:latest
    container_name: oracle-trader-prometheus-prod
    restart: always
    volumes:
      - ../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
      - prometheus_logs:/var/log/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--web.external-url=https://${DOMAIN}/prometheus'
    networks:
      - oracle-trader-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  grafana:
    image: grafana/grafana:latest
    container_name: oracle-trader-grafana-prod
    restart: always
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_SERVER_ROOT_URL=https://${DOMAIN}/grafana
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ../monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - grafana_logs:/var/log/grafana
    networks:
      - oracle-trader-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  certbot:
    image: certbot/certbot
    container_name: oracle-trader-certbot-prod
    volumes:
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    command: /bin/sh -c "trap exit TERM; while :; do certbot renew --quiet; sleep 12h & wait $${!}; done;"
    restart: always

  backup:
    image: alpine:latest
    container_name: oracle-trader-backup
    restart: "no"
    volumes:
      - postgres_data:/data/postgres:ro
      - redis_data:/data/redis:ro
      - app_data:/data/app:ro
      - ./backups:/backups
    command: /bin/sh -c "echo 'Backup container ready'"

volumes:
  postgres_data:
    driver: local
  postgres_backups:
    driver: local
  postgres_logs:
    driver: local
  redis_data:
    driver: local
  redis_logs:
    driver: local
  prometheus_data:
    driver: local
  prometheus_logs:
    driver: local
  grafana_data:
    driver: local
  grafana_logs:
    driver: local
  app_data:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local
  certbot_conf:
    driver: local
  certbot_www:
    driver: local

networks:
  oracle-trader-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16